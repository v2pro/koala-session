// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package koala_session

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type BaseAction struct {
	ActionIndex int64  `thrift:"ActionIndex,1"`
	OccurredAt  int64  `thrift:"OccurredAt,2"`
	ActionType  string `thrift:"ActionType,3"`
}

func NewBaseAction() *BaseAction {
	return &BaseAction{}
}

func (p *BaseAction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BaseAction) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ActionIndex = v
	}
	return nil
}

func (p *BaseAction) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.OccurredAt = v
	}
	return nil
}

func (p *BaseAction) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ActionType = v
	}
	return nil
}

func (p *BaseAction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BaseAction"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BaseAction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ActionIndex", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ActionIndex: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ActionIndex)); err != nil {
		return fmt.Errorf("%T.ActionIndex (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ActionIndex: %s", p, err)
	}
	return err
}

func (p *BaseAction) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("OccurredAt", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:OccurredAt: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.OccurredAt)); err != nil {
		return fmt.Errorf("%T.OccurredAt (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:OccurredAt: %s", p, err)
	}
	return err
}

func (p *BaseAction) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ActionType", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ActionType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ActionType)); err != nil {
		return fmt.Errorf("%T.ActionType (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ActionType: %s", p, err)
	}
	return err
}

func (p *BaseAction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseAction(%+v)", *p)
}

type Peer struct {
	IP   string `thrift:"IP,1"`
	Port int64  `thrift:"Port,2"`
	Zone string `thrift:"Zone,3"`
}

func NewPeer() *Peer {
	return &Peer{}
}

func (p *Peer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Peer) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IP = v
	}
	return nil
}

func (p *Peer) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Port = v
	}
	return nil
}

func (p *Peer) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Zone = v
	}
	return nil
}

func (p *Peer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Peer"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Peer) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("IP", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:IP: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return fmt.Errorf("%T.IP (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:IP: %s", p, err)
	}
	return err
}

func (p *Peer) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Port", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Port: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Port)); err != nil {
		return fmt.Errorf("%T.Port (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Port: %s", p, err)
	}
	return err
}

func (p *Peer) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Zone", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Zone: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Zone)); err != nil {
		return fmt.Errorf("%T.Zone (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Zone: %s", p, err)
	}
	return err
}

func (p *Peer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Peer(%+v)", *p)
}

type CallFromInbound struct {
	Base    *BaseAction `thrift:"Base,1"`
	Peer    *Peer       `thrift:"Peer,2"`
	Request []byte      `thrift:"Request,3"`
}

func NewCallFromInbound() *CallFromInbound {
	return &CallFromInbound{}
}

func (p *CallFromInbound) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CallFromInbound) readField1(iprot thrift.TProtocol) error {
	p.Base = NewBaseAction()
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base)
	}
	return nil
}

func (p *CallFromInbound) readField2(iprot thrift.TProtocol) error {
	p.Peer = NewPeer()
	if err := p.Peer.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Peer)
	}
	return nil
}

func (p *CallFromInbound) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Request = v
	}
	return nil
}

func (p *CallFromInbound) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallFromInbound"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CallFromInbound) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Base != nil {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
		}
	}
	return err
}

func (p *CallFromInbound) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Peer != nil {
		if err := oprot.WriteFieldBegin("Peer", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Peer: %s", p, err)
		}
		if err := p.Peer.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Peer)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Peer: %s", p, err)
		}
	}
	return err
}

func (p *CallFromInbound) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Request != nil {
		if err := oprot.WriteFieldBegin("Request", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Request: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Request); err != nil {
			return fmt.Errorf("%T.Request (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Request: %s", p, err)
		}
	}
	return err
}

func (p *CallFromInbound) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallFromInbound(%+v)", *p)
}

type ReturnInbound struct {
	Base     *BaseAction `thrift:"Base,1"`
	Response []byte      `thrift:"Response,2"`
}

func NewReturnInbound() *ReturnInbound {
	return &ReturnInbound{}
}

func (p *ReturnInbound) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReturnInbound) readField1(iprot thrift.TProtocol) error {
	p.Base = NewBaseAction()
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base)
	}
	return nil
}

func (p *ReturnInbound) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Response = v
	}
	return nil
}

func (p *ReturnInbound) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReturnInbound"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ReturnInbound) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Base != nil {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
		}
	}
	return err
}

func (p *ReturnInbound) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Response != nil {
		if err := oprot.WriteFieldBegin("Response", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Response: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Response); err != nil {
			return fmt.Errorf("%T.Response (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Response: %s", p, err)
		}
	}
	return err
}

func (p *ReturnInbound) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReturnInbound(%+v)", *p)
}

type CallOutbound struct {
	Base         *BaseAction `thrift:"Base,1"`
	SocketFD     int64       `thrift:"SocketFD,2"`
	Peer         *Peer       `thrift:"Peer,3"`
	Request      []byte      `thrift:"Request,4"`
	ResponseTime int64       `thrift:"ResponseTime,5"`
	Response     []byte      `thrift:"Response,6"`
}

func NewCallOutbound() *CallOutbound {
	return &CallOutbound{}
}

func (p *CallOutbound) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CallOutbound) readField1(iprot thrift.TProtocol) error {
	p.Base = NewBaseAction()
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base)
	}
	return nil
}

func (p *CallOutbound) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.SocketFD = v
	}
	return nil
}

func (p *CallOutbound) readField3(iprot thrift.TProtocol) error {
	p.Peer = NewPeer()
	if err := p.Peer.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Peer)
	}
	return nil
}

func (p *CallOutbound) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Request = v
	}
	return nil
}

func (p *CallOutbound) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.ResponseTime = v
	}
	return nil
}

func (p *CallOutbound) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Response = v
	}
	return nil
}

func (p *CallOutbound) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CallOutbound"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CallOutbound) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Base != nil {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
		}
	}
	return err
}

func (p *CallOutbound) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SocketFD", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:SocketFD: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SocketFD)); err != nil {
		return fmt.Errorf("%T.SocketFD (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:SocketFD: %s", p, err)
	}
	return err
}

func (p *CallOutbound) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Peer != nil {
		if err := oprot.WriteFieldBegin("Peer", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Peer: %s", p, err)
		}
		if err := p.Peer.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Peer)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Peer: %s", p, err)
		}
	}
	return err
}

func (p *CallOutbound) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Request != nil {
		if err := oprot.WriteFieldBegin("Request", thrift.BINARY, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:Request: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Request); err != nil {
			return fmt.Errorf("%T.Request (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:Request: %s", p, err)
		}
	}
	return err
}

func (p *CallOutbound) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ResponseTime", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ResponseTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ResponseTime)); err != nil {
		return fmt.Errorf("%T.ResponseTime (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ResponseTime: %s", p, err)
	}
	return err
}

func (p *CallOutbound) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Response != nil {
		if err := oprot.WriteFieldBegin("Response", thrift.BINARY, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:Response: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Response); err != nil {
			return fmt.Errorf("%T.Response (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:Response: %s", p, err)
		}
	}
	return err
}

func (p *CallOutbound) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CallOutbound(%+v)", *p)
}

type AppendFile struct {
	Base     *BaseAction `thrift:"Base,1"`
	FileName string      `thrift:"FileName,2"`
	Content  []byte      `thrift:"Content,3"`
}

func NewAppendFile() *AppendFile {
	return &AppendFile{}
}

func (p *AppendFile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendFile) readField1(iprot thrift.TProtocol) error {
	p.Base = NewBaseAction()
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base)
	}
	return nil
}

func (p *AppendFile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.FileName = v
	}
	return nil
}

func (p *AppendFile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Content = v
	}
	return nil
}

func (p *AppendFile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppendFile"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendFile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Base != nil {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
		}
	}
	return err
}

func (p *AppendFile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("FileName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:FileName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return fmt.Errorf("%T.FileName (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:FileName: %s", p, err)
	}
	return err
}

func (p *AppendFile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Content != nil {
		if err := oprot.WriteFieldBegin("Content", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Content: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Content); err != nil {
			return fmt.Errorf("%T.Content (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Content: %s", p, err)
		}
	}
	return err
}

func (p *AppendFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendFile(%+v)", *p)
}

type SendUDP struct {
	Base    *BaseAction `thrift:"Base,1"`
	Peer    *Peer       `thrift:"Peer,2"`
	Content []byte      `thrift:"Content,3"`
}

func NewSendUDP() *SendUDP {
	return &SendUDP{}
}

func (p *SendUDP) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendUDP) readField1(iprot thrift.TProtocol) error {
	p.Base = NewBaseAction()
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base)
	}
	return nil
}

func (p *SendUDP) readField2(iprot thrift.TProtocol) error {
	p.Peer = NewPeer()
	if err := p.Peer.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Peer)
	}
	return nil
}

func (p *SendUDP) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Content = v
	}
	return nil
}

func (p *SendUDP) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendUDP"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SendUDP) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Base != nil {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
		}
	}
	return err
}

func (p *SendUDP) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Peer != nil {
		if err := oprot.WriteFieldBegin("Peer", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Peer: %s", p, err)
		}
		if err := p.Peer.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Peer)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Peer: %s", p, err)
		}
	}
	return err
}

func (p *SendUDP) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Content != nil {
		if err := oprot.WriteFieldBegin("Content", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Content: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Content); err != nil {
			return fmt.Errorf("%T.Content (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Content: %s", p, err)
		}
	}
	return err
}

func (p *SendUDP) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendUDP(%+v)", *p)
}

type Action struct {
	CallFromInbound *CallFromInbound `thrift:"CallFromInbound,1"`
	ReturnInBound   *ReturnInbound   `thrift:"ReturnInBound,2"`
	CallOutbound    *CallOutbound    `thrift:"CallOutbound,3"`
	AppendFile      *AppendFile      `thrift:"AppendFile,4"`
	SendUDP         *SendUDP         `thrift:"SendUDP,5"`
}

func NewAction() *Action {
	return &Action{}
}

func (p *Action) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Action) readField1(iprot thrift.TProtocol) error {
	p.CallFromInbound = NewCallFromInbound()
	if err := p.CallFromInbound.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallFromInbound)
	}
	return nil
}

func (p *Action) readField2(iprot thrift.TProtocol) error {
	p.ReturnInBound = NewReturnInbound()
	if err := p.ReturnInBound.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ReturnInBound)
	}
	return nil
}

func (p *Action) readField3(iprot thrift.TProtocol) error {
	p.CallOutbound = NewCallOutbound()
	if err := p.CallOutbound.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallOutbound)
	}
	return nil
}

func (p *Action) readField4(iprot thrift.TProtocol) error {
	p.AppendFile = NewAppendFile()
	if err := p.AppendFile.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AppendFile)
	}
	return nil
}

func (p *Action) readField5(iprot thrift.TProtocol) error {
	p.SendUDP = NewSendUDP()
	if err := p.SendUDP.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SendUDP)
	}
	return nil
}

func (p *Action) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Action"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Action) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CallFromInbound != nil {
		if err := oprot.WriteFieldBegin("CallFromInbound", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:CallFromInbound: %s", p, err)
		}
		if err := p.CallFromInbound.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallFromInbound)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:CallFromInbound: %s", p, err)
		}
	}
	return err
}

func (p *Action) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ReturnInBound != nil {
		if err := oprot.WriteFieldBegin("ReturnInBound", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:ReturnInBound: %s", p, err)
		}
		if err := p.ReturnInBound.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ReturnInBound)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:ReturnInBound: %s", p, err)
		}
	}
	return err
}

func (p *Action) writeField3(oprot thrift.TProtocol) (err error) {
	if p.CallOutbound != nil {
		if err := oprot.WriteFieldBegin("CallOutbound", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:CallOutbound: %s", p, err)
		}
		if err := p.CallOutbound.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallOutbound)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:CallOutbound: %s", p, err)
		}
	}
	return err
}

func (p *Action) writeField4(oprot thrift.TProtocol) (err error) {
	if p.AppendFile != nil {
		if err := oprot.WriteFieldBegin("AppendFile", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:AppendFile: %s", p, err)
		}
		if err := p.AppendFile.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.AppendFile)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:AppendFile: %s", p, err)
		}
	}
	return err
}

func (p *Action) writeField5(oprot thrift.TProtocol) (err error) {
	if p.SendUDP != nil {
		if err := oprot.WriteFieldBegin("SendUDP", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:SendUDP: %s", p, err)
		}
		if err := p.SendUDP.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.SendUDP)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:SendUDP: %s", p, err)
		}
	}
	return err
}

func (p *Action) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Action(%+v)", *p)
}

type Session struct {
	SessionId       string           `thrift:"SessionId,1"`
	CallFromInbound *CallFromInbound `thrift:"CallFromInbound,2"`
	ReturnInbound   *ReturnInbound   `thrift:"ReturnInbound,3"`
	Actions         []*Action        `thrift:"Actions,4"`
}

func NewSession() *Session {
	return &Session{}
}

func (p *Session) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Session) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *Session) readField2(iprot thrift.TProtocol) error {
	p.CallFromInbound = NewCallFromInbound()
	if err := p.CallFromInbound.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CallFromInbound)
	}
	return nil
}

func (p *Session) readField3(iprot thrift.TProtocol) error {
	p.ReturnInbound = NewReturnInbound()
	if err := p.ReturnInbound.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ReturnInbound)
	}
	return nil
}

func (p *Session) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Actions = make([]*Action, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewAction()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Actions = append(p.Actions, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Session) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Session"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Session) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:SessionId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionId)); err != nil {
		return fmt.Errorf("%T.SessionId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:SessionId: %s", p, err)
	}
	return err
}

func (p *Session) writeField2(oprot thrift.TProtocol) (err error) {
	if p.CallFromInbound != nil {
		if err := oprot.WriteFieldBegin("CallFromInbound", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:CallFromInbound: %s", p, err)
		}
		if err := p.CallFromInbound.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CallFromInbound)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:CallFromInbound: %s", p, err)
		}
	}
	return err
}

func (p *Session) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ReturnInbound != nil {
		if err := oprot.WriteFieldBegin("ReturnInbound", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:ReturnInbound: %s", p, err)
		}
		if err := p.ReturnInbound.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.ReturnInbound)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:ReturnInbound: %s", p, err)
		}
	}
	return err
}

func (p *Session) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Actions != nil {
		if err := oprot.WriteFieldBegin("Actions", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:Actions: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Actions)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Actions {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:Actions: %s", p, err)
		}
	}
	return err
}

func (p *Session) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Session(%+v)", *p)
}
